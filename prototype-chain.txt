// 先在object instance內找 找不到就去這個object的__proto__找 再找不到就再去 "object的__proto__"的__proto__找...etc
// 此即為prototype chain

function funcA() {
  this.var1 = 0;
}

function funcB() {
  this.var2 = 10;
  this.var3 = 100;
}

function funcC() {
  this.var4 = 20;
  this.var5 = 300;
}

funcB.prototype = new funcA();
// 使用new有三流程 
// (1) 創建「空物件」
// (2) 「空物件」的__proto__指向funcA.prototype
// (3) 執行funcA並且將this指向最近創造的物件也就是「空物件」(通常此時this會指向自己這個constructor function)
// (4) 完成new這個operator
// (5) 再來funcB.prototype = 此「空物件」，而物件為pass by reference
// (6) 因此funcB.prototype指向此空物件
// (7) 因此funcB.prototype.__proto__指向funcA.prototype
// (8) funcB.prototype.var1 = 0
funcB.prototype.var1 = 50;
// override 所以0變成50


funcC.prototype = new funcB();
// funcC.prototype.__proto__ = funcB.prototype
// funcC.prototype.var2 = 10, funcC.prototype.var3 = 100
funcC.prototype.var6 = 400;

var temp = new funcC();
// temp.__proto__ = funcC.prototype
// 所以有temp.var4 = 20, temp.var5 = 300


console.log(temp.var1);
// 先在temp找 找不到所以去 temp的__proto__:funcC.prototype 
// 找不到所以再往上 去funcB.prototype找
// 找到funcB.prototype.var1 = 50
// 所以找到var1 = 50 印出temp.var1

console.log(temp.var2);
// funcC.prototype.var2 = 10
console.log(temp.var3);
// funcC.prototype.var3 = 100
console.log(temp.var4); 
// temp.var4 = 20 直接找到
console.log(temp.var5);
// temp.var5 = 300 直接找到
console.log(temp.var6);
// funcC.prototype.var6 = 400

// 因為是原型鍊查找 所以找不到會去上層找 不算是完全的「繼承」
// 所以在上層更改 所有下層所找的東西也會一同更改
funcB.prototype.var7 = 99;
console.log(funcC.prototype.var7); //99
funcB.prototype.var7 = 20;
console.log(funcC.prototype.var7); //20


